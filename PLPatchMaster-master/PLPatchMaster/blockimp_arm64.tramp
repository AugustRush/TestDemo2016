#!/bin/sh

# -----------------------------------------------------------------------
#  Copyright (c) 2010-2014, Plausible Labs Cooperative, Inc.
#  All Rights Reserved.
# 
#  Permission is hereby granted, free of charge, to any person obtaining
#  a copy of this software and associated documentation files (the
#  ``Software''), to deal in the Software without restriction, including
#  without limitation the rights to use, copy, modify, merge, publish,
#  distribute, sublicense, and/or sell copies of the Software, and to
#  permit persons to whom the Software is furnished to do so, subject to
#  the following conditions:
#
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#  -----------------------------------------------------------------------

# Supported architectures
check_architecture () {
    case $1 in
        arm64)
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

# Page size
PAGE_SIZE="16384"

# The name of this page
PAGE_NAME=pl_blockimp_patch_table_page

# Prefix to be placed at the start of the trampoline page
trampoline_prefix () {
asm << 'EOF'
    _block_tramp_dispatch:
    // trampoline address+8 is in lr -- calculate our config page address
    sub x12, lr, #0x8
    sub x12, x12, #0x4000

    // restore the link register
    mov lr, x13

    // Set up our function stack
    stp     fp, lr, [sp, #-16]!
    add     fp, sp, 0
    sub     sp, sp, #32 // Three pointer struct

    // Insert 'self' in the first struct position
    str     x0, [sp]

    // Load the original IMP from the config page, and move to the second struct position
    ldr     x0, [x12, #16]
    str     x0, [sp, #8]

    // Load the original SEL from the config page, and move to the third struct position
    ldr     x0, [x12, #24]
    str     x0, [sp, #16]

    // Move our struct to the second parameter, overwriting IMP
    mov     x1, sp

    // Load the block reference from the config page, and move to the first parameter
    ldr     x0, [x12]

    // Call the block fptr
    ldr     x13, [x0, #16]
    blr     x13

    // Finished!
    add     sp, fp, 0
    ldp     fp, lr, [sp], #16
    ret     lr
EOF
}

# Generate a single trampoline
trampoline () {
asm << 'EOF'
    # Save lr, then jump to the shared prefix implementation
    mov x13, lr
    bl _block_tramp_dispatch;
    // align to 32 bytes (to fit the size of our config entries)
    .align 5
EOF
}